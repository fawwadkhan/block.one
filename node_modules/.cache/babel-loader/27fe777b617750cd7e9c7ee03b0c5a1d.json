{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar base58 = require('bs58');\n\nvar assert = require('assert');\n\nvar randomBytes = require('randombytes');\n\nvar hash = require('./hash');\n\nmodule.exports = {\n  random32ByteBuffer: random32ByteBuffer,\n  addEntropy: addEntropy,\n  cpuEntropy: cpuEntropy,\n  entropyCount: function entropyCount() {\n    return _entropyCount;\n  },\n  checkDecode: checkDecode,\n  checkEncode: checkEncode\n};\nvar entropyPos = 0,\n    _entropyCount = 0;\nvar externalEntropyArray = randomBytes(101);\n/**\n    Additional forms of entropy are used.  A week random number generator can run out of entropy.  This should ensure even the worst random number implementation will be reasonably safe.\n\n    @arg {number} [cpuEntropyBits = 0] generate entropy on the fly.  This is\n    not required, entropy can be added in advanced via addEntropy or initialize().\n\n    @arg {boolean} [safe = true] false for testing, otherwise this will be\n    true to ensure initialize() was called.\n\n    @return a random buffer obtained from the secure random number generator.  Additional entropy is used.\n*/\n\nfunction random32ByteBuffer() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$cpuEntropyBits = _ref.cpuEntropyBits,\n      cpuEntropyBits = _ref$cpuEntropyBits === undefined ? 0 : _ref$cpuEntropyBits,\n      _ref$safe = _ref.safe,\n      safe = _ref$safe === undefined ? true : _ref$safe;\n\n  assert.equal(typeof cpuEntropyBits === 'undefined' ? 'undefined' : _typeof(cpuEntropyBits), 'number', 'cpuEntropyBits');\n  assert.equal(typeof safe === 'undefined' ? 'undefined' : _typeof(safe), 'boolean', 'boolean');\n\n  if (safe) {\n    assert(_entropyCount >= 128, 'Call initialize() to add entropy');\n  } // if(entropyCount > 0) {\n  //     console.log(`Additional private key entropy: ${entropyCount} events`)\n  // }\n\n\n  var hash_array = [];\n  hash_array.push(randomBytes(32));\n  hash_array.push(Buffer.from(cpuEntropy(cpuEntropyBits)));\n  hash_array.push(externalEntropyArray);\n  hash_array.push(browserEntropy());\n  return hash.sha256(Buffer.concat(hash_array));\n}\n/**\n    Adds entropy.  This may be called many times while the amount of data saved\n    is accumulatively reduced to 101 integers.  Data is retained in RAM for the\n    life of this module.\n\n    @example React <code>\n    componentDidMount() {\n        this.refs.MyComponent.addEventListener(\"mousemove\", this.onEntropyEvent, {capture: false, passive: true})\n    }\n    componentWillUnmount() {\n        this.refs.MyComponent.removeEventListener(\"mousemove\", this.onEntropyEvent);\n    }\n    onEntropyEvent = (e) => {\n        if(e.type === 'mousemove')\n            key_utils.addEntropy(e.pageX, e.pageY, e.screenX, e.screenY)\n        else\n            console.log('onEntropyEvent Unknown', e.type, e)\n    }\n    </code>\n*/\n\n\nfunction addEntropy() {\n  assert.equal(externalEntropyArray.length, 101, 'externalEntropyArray');\n\n  for (var _len = arguments.length, ints = Array(_len), _key = 0; _key < _len; _key++) {\n    ints[_key] = arguments[_key];\n  }\n\n  _entropyCount += ints.length;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = ints[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var i = _step.value;\n      var pos = entropyPos++ % 101;\n      var i2 = externalEntropyArray[pos] += i;\n      if (i2 > 9007199254740991) externalEntropyArray[pos] = 0;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n/**\n    This runs in just under 1 second and ensures a minimum of cpuEntropyBits\n    bits of entropy are gathered.\n\n    Based on more-entropy. @see https://github.com/keybase/more-entropy/blob/master/src/generator.iced\n\n    @arg {number} [cpuEntropyBits = 128]\n    @return {array} counts gathered by measuring variations in the CPU speed during floating point operations.\n*/\n\n\nfunction cpuEntropy() {\n  var cpuEntropyBits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n  var collected = [];\n  var lastCount = null;\n  var lowEntropySamples = 0;\n\n  while (collected.length < cpuEntropyBits) {\n    var count = floatingPointCount();\n\n    if (lastCount != null) {\n      var delta = count - lastCount;\n\n      if (Math.abs(delta) < 1) {\n        lowEntropySamples++;\n        continue;\n      } // how many bits of entropy were in this sample\n\n\n      var bits = Math.floor(log2(Math.abs(delta)) + 1);\n\n      if (bits < 4) {\n        if (bits < 2) {\n          lowEntropySamples++;\n        }\n\n        continue;\n      }\n\n      collected.push(delta);\n    }\n\n    lastCount = count;\n  }\n\n  if (lowEntropySamples > 10) {\n    var pct = Number(lowEntropySamples / cpuEntropyBits * 100).toFixed(2); // Is this algorithm getting inefficient?\n\n    console.warn('WARN: ' + pct + '% low CPU entropy re-sampled');\n  }\n\n  return collected;\n}\n/**\n    @private\n    Count while performing floating point operations during a fixed time\n    (7 ms for example).  Using a fixed time makes this algorithm\n    predictable in runtime.\n*/\n\n\nfunction floatingPointCount() {\n  var workMinMs = 7;\n  var d = Date.now();\n  var i = 0,\n      x = 0;\n\n  while (Date.now() < d + workMinMs + 1) {\n    x = Math.sin(Math.sqrt(Math.log(++i + x)));\n  }\n\n  return i;\n}\n\nvar log2 = function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n    @private\n    Attempt to gather and hash information from the browser's window, history, and supported mime types.  For non-browser environments this simply includes secure random data.  In any event, the information is re-hashed in a loop for 25 milliseconds seconds.\n\n    @return {Buffer} 32 bytes\n*/\n\n\nfunction browserEntropy() {\n  var entropyStr = Array(randomBytes(101)).join();\n\n  try {\n    entropyStr += new Date().toString() + \" \" + window.screen.height + \" \" + window.screen.width + \" \" + window.screen.colorDepth + \" \" + \" \" + window.screen.availHeight + \" \" + window.screen.availWidth + \" \" + window.screen.pixelDepth + navigator.language + \" \" + window.location + \" \" + window.history.length;\n\n    for (var i = 0, mimeType; i < navigator.mimeTypes.length; i++) {\n      mimeType = navigator.mimeTypes[i];\n      entropyStr += mimeType.description + \" \" + mimeType.type + \" \" + mimeType.suffixes + \" \";\n    }\n  } catch (error) {\n    //nodejs:ReferenceError: window is not defined\n    entropyStr += hash.sha256(new Date().toString());\n  }\n\n  var b = new Buffer(entropyStr);\n  entropyStr += b.toString('binary') + \" \" + new Date().toString();\n  var entropy = entropyStr;\n  var start_t = Date.now();\n\n  while (Date.now() - start_t < 25) {\n    entropy = hash.sha256(entropy);\n  }\n\n  return entropy;\n}\n/**\n  @arg {Buffer} keyBuffer data\n  @arg {string} keyType = sha256x2, K1, etc\n  @return {string} checksum encoded base58 string\n*/\n\n\nfunction checkEncode(keyBuffer) {\n  var keyType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  assert(Buffer.isBuffer(keyBuffer), 'expecting keyBuffer<Buffer>');\n\n  if (keyType === 'sha256x2') {\n    // legacy\n    var checksum = hash.sha256(hash.sha256(keyBuffer)).slice(0, 4);\n    return base58.encode(Buffer.concat([keyBuffer, checksum]));\n  } else {\n    var check = [keyBuffer];\n\n    if (keyType) {\n      check.push(Buffer.from(keyType));\n    }\n\n    var _checksum = hash.ripemd160(Buffer.concat(check)).slice(0, 4);\n\n    return base58.encode(Buffer.concat([keyBuffer, _checksum]));\n  }\n}\n/**\n  @arg {Buffer} keyString data\n  @arg {string} keyType = sha256x2, K1, etc\n  @return {string} checksum encoded base58 string\n*/\n\n\nfunction checkDecode(keyString) {\n  var keyType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  assert(keyString != null, 'private key expected');\n  var buffer = new Buffer(base58.decode(keyString));\n  var checksum = buffer.slice(-4);\n  var key = buffer.slice(0, -4);\n  var newCheck = void 0;\n\n  if (keyType === 'sha256x2') {\n    // legacy\n    newCheck = hash.sha256(hash.sha256(key)).slice(0, 4); // WIF (legacy)\n  } else {\n    var check = [key];\n\n    if (keyType) {\n      check.push(Buffer.from(keyType));\n    }\n\n    newCheck = hash.ripemd160(Buffer.concat(check)).slice(0, 4); //PVT\n  }\n\n  if (checksum.toString() !== newCheck.toString()) {\n    throw new Error('Invalid checksum, ' + (checksum.toString('hex') + ' != ' + newCheck.toString('hex')));\n  }\n\n  return key;\n}","map":{"version":3,"sources":["/Users/madcad/Documents/block.three/node_modules/eosjs-ecc/lib/key_utils.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","base58","require","assert","randomBytes","hash","module","exports","random32ByteBuffer","addEntropy","cpuEntropy","entropyCount","_entropyCount","checkDecode","checkEncode","entropyPos","externalEntropyArray","_ref","arguments","length","undefined","_ref$cpuEntropyBits","cpuEntropyBits","_ref$safe","safe","equal","hash_array","push","Buffer","from","browserEntropy","sha256","concat","_len","ints","Array","_key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","i","value","pos","i2","err","return","collected","lastCount","lowEntropySamples","count","floatingPointCount","delta","Math","abs","bits","floor","log2","pct","Number","toFixed","console","warn","workMinMs","d","Date","now","x","sin","sqrt","log","LN2","entropyStr","join","toString","window","screen","height","width","colorDepth","availHeight","availWidth","pixelDepth","navigator","language","location","history","mimeType","mimeTypes","description","type","suffixes","error","b","entropy","start_t","keyBuffer","keyType","isBuffer","checksum","slice","encode","check","_checksum","ripemd160","keyString","buffer","decode","key","newCheck","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar base58 = require('bs58');\nvar assert = require('assert');\nvar randomBytes = require('randombytes');\n\nvar hash = require('./hash');\n\nmodule.exports = {\n    random32ByteBuffer: random32ByteBuffer,\n    addEntropy: addEntropy,\n    cpuEntropy: cpuEntropy,\n    entropyCount: function entropyCount() {\n        return _entropyCount;\n    },\n    checkDecode: checkDecode,\n    checkEncode: checkEncode\n};\n\nvar entropyPos = 0,\n    _entropyCount = 0;\n\nvar externalEntropyArray = randomBytes(101);\n\n/**\n    Additional forms of entropy are used.  A week random number generator can run out of entropy.  This should ensure even the worst random number implementation will be reasonably safe.\n\n    @arg {number} [cpuEntropyBits = 0] generate entropy on the fly.  This is\n    not required, entropy can be added in advanced via addEntropy or initialize().\n\n    @arg {boolean} [safe = true] false for testing, otherwise this will be\n    true to ensure initialize() was called.\n\n    @return a random buffer obtained from the secure random number generator.  Additional entropy is used.\n*/\nfunction random32ByteBuffer() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$cpuEntropyBits = _ref.cpuEntropyBits,\n        cpuEntropyBits = _ref$cpuEntropyBits === undefined ? 0 : _ref$cpuEntropyBits,\n        _ref$safe = _ref.safe,\n        safe = _ref$safe === undefined ? true : _ref$safe;\n\n    assert.equal(typeof cpuEntropyBits === 'undefined' ? 'undefined' : _typeof(cpuEntropyBits), 'number', 'cpuEntropyBits');\n    assert.equal(typeof safe === 'undefined' ? 'undefined' : _typeof(safe), 'boolean', 'boolean');\n\n    if (safe) {\n        assert(_entropyCount >= 128, 'Call initialize() to add entropy');\n    }\n\n    // if(entropyCount > 0) {\n    //     console.log(`Additional private key entropy: ${entropyCount} events`)\n    // }\n\n    var hash_array = [];\n    hash_array.push(randomBytes(32));\n    hash_array.push(Buffer.from(cpuEntropy(cpuEntropyBits)));\n    hash_array.push(externalEntropyArray);\n    hash_array.push(browserEntropy());\n    return hash.sha256(Buffer.concat(hash_array));\n}\n\n/**\n    Adds entropy.  This may be called many times while the amount of data saved\n    is accumulatively reduced to 101 integers.  Data is retained in RAM for the\n    life of this module.\n\n    @example React <code>\n    componentDidMount() {\n        this.refs.MyComponent.addEventListener(\"mousemove\", this.onEntropyEvent, {capture: false, passive: true})\n    }\n    componentWillUnmount() {\n        this.refs.MyComponent.removeEventListener(\"mousemove\", this.onEntropyEvent);\n    }\n    onEntropyEvent = (e) => {\n        if(e.type === 'mousemove')\n            key_utils.addEntropy(e.pageX, e.pageY, e.screenX, e.screenY)\n        else\n            console.log('onEntropyEvent Unknown', e.type, e)\n    }\n    </code>\n*/\nfunction addEntropy() {\n    assert.equal(externalEntropyArray.length, 101, 'externalEntropyArray');\n\n    for (var _len = arguments.length, ints = Array(_len), _key = 0; _key < _len; _key++) {\n        ints[_key] = arguments[_key];\n    }\n\n    _entropyCount += ints.length;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = ints[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var i = _step.value;\n\n            var pos = entropyPos++ % 101;\n            var i2 = externalEntropyArray[pos] += i;\n            if (i2 > 9007199254740991) externalEntropyArray[pos] = 0;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n\n/**\n    This runs in just under 1 second and ensures a minimum of cpuEntropyBits\n    bits of entropy are gathered.\n\n    Based on more-entropy. @see https://github.com/keybase/more-entropy/blob/master/src/generator.iced\n\n    @arg {number} [cpuEntropyBits = 128]\n    @return {array} counts gathered by measuring variations in the CPU speed during floating point operations.\n*/\nfunction cpuEntropy() {\n    var cpuEntropyBits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n\n    var collected = [];\n    var lastCount = null;\n    var lowEntropySamples = 0;\n    while (collected.length < cpuEntropyBits) {\n        var count = floatingPointCount();\n        if (lastCount != null) {\n            var delta = count - lastCount;\n            if (Math.abs(delta) < 1) {\n                lowEntropySamples++;\n                continue;\n            }\n            // how many bits of entropy were in this sample\n            var bits = Math.floor(log2(Math.abs(delta)) + 1);\n            if (bits < 4) {\n                if (bits < 2) {\n                    lowEntropySamples++;\n                }\n                continue;\n            }\n            collected.push(delta);\n        }\n        lastCount = count;\n    }\n    if (lowEntropySamples > 10) {\n        var pct = Number(lowEntropySamples / cpuEntropyBits * 100).toFixed(2);\n        // Is this algorithm getting inefficient?\n        console.warn('WARN: ' + pct + '% low CPU entropy re-sampled');\n    }\n    return collected;\n}\n\n/**\n    @private\n    Count while performing floating point operations during a fixed time\n    (7 ms for example).  Using a fixed time makes this algorithm\n    predictable in runtime.\n*/\nfunction floatingPointCount() {\n    var workMinMs = 7;\n    var d = Date.now();\n    var i = 0,\n        x = 0;\n    while (Date.now() < d + workMinMs + 1) {\n        x = Math.sin(Math.sqrt(Math.log(++i + x)));\n    }\n    return i;\n}\n\nvar log2 = function log2(x) {\n    return Math.log(x) / Math.LN2;\n};\n\n/**\n    @private\n    Attempt to gather and hash information from the browser's window, history, and supported mime types.  For non-browser environments this simply includes secure random data.  In any event, the information is re-hashed in a loop for 25 milliseconds seconds.\n\n    @return {Buffer} 32 bytes\n*/\nfunction browserEntropy() {\n    var entropyStr = Array(randomBytes(101)).join();\n    try {\n        entropyStr += new Date().toString() + \" \" + window.screen.height + \" \" + window.screen.width + \" \" + window.screen.colorDepth + \" \" + \" \" + window.screen.availHeight + \" \" + window.screen.availWidth + \" \" + window.screen.pixelDepth + navigator.language + \" \" + window.location + \" \" + window.history.length;\n\n        for (var i = 0, mimeType; i < navigator.mimeTypes.length; i++) {\n            mimeType = navigator.mimeTypes[i];\n            entropyStr += mimeType.description + \" \" + mimeType.type + \" \" + mimeType.suffixes + \" \";\n        }\n    } catch (error) {\n        //nodejs:ReferenceError: window is not defined\n        entropyStr += hash.sha256(new Date().toString());\n    }\n\n    var b = new Buffer(entropyStr);\n    entropyStr += b.toString('binary') + \" \" + new Date().toString();\n\n    var entropy = entropyStr;\n    var start_t = Date.now();\n    while (Date.now() - start_t < 25) {\n        entropy = hash.sha256(entropy);\n    }return entropy;\n}\n\n/**\n  @arg {Buffer} keyBuffer data\n  @arg {string} keyType = sha256x2, K1, etc\n  @return {string} checksum encoded base58 string\n*/\nfunction checkEncode(keyBuffer) {\n    var keyType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    assert(Buffer.isBuffer(keyBuffer), 'expecting keyBuffer<Buffer>');\n    if (keyType === 'sha256x2') {\n        // legacy\n        var checksum = hash.sha256(hash.sha256(keyBuffer)).slice(0, 4);\n        return base58.encode(Buffer.concat([keyBuffer, checksum]));\n    } else {\n        var check = [keyBuffer];\n        if (keyType) {\n            check.push(Buffer.from(keyType));\n        }\n        var _checksum = hash.ripemd160(Buffer.concat(check)).slice(0, 4);\n        return base58.encode(Buffer.concat([keyBuffer, _checksum]));\n    }\n}\n\n/**\n  @arg {Buffer} keyString data\n  @arg {string} keyType = sha256x2, K1, etc\n  @return {string} checksum encoded base58 string\n*/\nfunction checkDecode(keyString) {\n    var keyType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    assert(keyString != null, 'private key expected');\n    var buffer = new Buffer(base58.decode(keyString));\n    var checksum = buffer.slice(-4);\n    var key = buffer.slice(0, -4);\n\n    var newCheck = void 0;\n    if (keyType === 'sha256x2') {\n        // legacy\n        newCheck = hash.sha256(hash.sha256(key)).slice(0, 4); // WIF (legacy)\n    } else {\n        var check = [key];\n        if (keyType) {\n            check.push(Buffer.from(keyType));\n        }\n        newCheck = hash.ripemd160(Buffer.concat(check)).slice(0, 4); //PVT\n    }\n\n    if (checksum.toString() !== newCheck.toString()) {\n        throw new Error('Invalid checksum, ' + (checksum.toString('hex') + ' != ' + newCheck.toString('hex')));\n    }\n\n    return key;\n}"]},"metadata":{},"sourceType":"script"}