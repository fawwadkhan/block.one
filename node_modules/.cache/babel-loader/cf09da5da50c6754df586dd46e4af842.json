{"ast":null,"code":"'use strict';\n\nvar createHash = require('create-hash');\n\nvar createHmac = require('create-hmac');\n/** @namespace hash */\n\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha1(data, resultEncoding) {\n  return createHash('sha1').update(data).digest(resultEncoding);\n}\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha256(data, resultEncoding) {\n  return createHash('sha256').update(data).digest(resultEncoding);\n}\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\n\n\nfunction sha512(data, resultEncoding) {\n  return createHash('sha512').update(data).digest(resultEncoding);\n}\n\nfunction HmacSHA256(buffer, secret) {\n  return createHmac('sha256', secret).update(buffer).digest();\n}\n\nfunction ripemd160(data) {\n  return createHash('rmd160').update(data).digest();\n} // function hash160(buffer) {\n//   return ripemd160(sha256(buffer))\n// }\n//\n// function hash256(buffer) {\n//   return sha256(sha256(buffer))\n// }\n//\n// function HmacSHA512(buffer, secret) {\n//   return crypto.createHmac('sha512', secret).update(buffer).digest()\n// }\n\n\nmodule.exports = {\n  sha1: sha1,\n  sha256: sha256,\n  sha512: sha512,\n  HmacSHA256: HmacSHA256,\n  ripemd160: ripemd160 // hash160: hash160,\n  // hash256: hash256,\n  // HmacSHA512: HmacSHA512\n\n};","map":{"version":3,"sources":["/Users/madcad/Documents/block.three/node_modules/eosjs-ecc/lib/hash.js"],"names":["createHash","require","createHmac","sha1","data","resultEncoding","update","digest","sha256","sha512","HmacSHA256","buffer","secret","ripemd160","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAAxB;AAEA;;AAEA;;;;;;AAIA,SAASE,IAAT,CAAcC,IAAd,EAAoBC,cAApB,EAAoC;AAChC,SAAOL,UAAU,CAAC,MAAD,CAAV,CAAmBM,MAAnB,CAA0BF,IAA1B,EAAgCG,MAAhC,CAAuCF,cAAvC,CAAP;AACH;AAED;;;;;;AAIA,SAASG,MAAT,CAAgBJ,IAAhB,EAAsBC,cAAtB,EAAsC;AAClC,SAAOL,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BF,IAA5B,EAAkCG,MAAlC,CAAyCF,cAAzC,CAAP;AACH;AAED;;;;;;AAIA,SAASI,MAAT,CAAgBL,IAAhB,EAAsBC,cAAtB,EAAsC;AAClC,SAAOL,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BF,IAA5B,EAAkCG,MAAlC,CAAyCF,cAAzC,CAAP;AACH;;AAED,SAASK,UAAT,CAAoBC,MAApB,EAA4BC,MAA5B,EAAoC;AAChC,SAAOV,UAAU,CAAC,QAAD,EAAWU,MAAX,CAAV,CAA6BN,MAA7B,CAAoCK,MAApC,EAA4CJ,MAA5C,EAAP;AACH;;AAED,SAASM,SAAT,CAAmBT,IAAnB,EAAyB;AACrB,SAAOJ,UAAU,CAAC,QAAD,CAAV,CAAqBM,MAArB,CAA4BF,IAA5B,EAAkCG,MAAlC,EAAP;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAO,MAAM,CAACC,OAAP,GAAiB;AACbZ,EAAAA,IAAI,EAAEA,IADO;AAEbK,EAAAA,MAAM,EAAEA,MAFK;AAGbC,EAAAA,MAAM,EAAEA,MAHK;AAIbC,EAAAA,UAAU,EAAEA,UAJC;AAKbG,EAAAA,SAAS,EAAEA,SALE,CAMb;AACA;AACA;;AARa,CAAjB","sourcesContent":["'use strict';\n\nvar createHash = require('create-hash');\nvar createHmac = require('create-hmac');\n\n/** @namespace hash */\n\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\nfunction sha1(data, resultEncoding) {\n    return createHash('sha1').update(data).digest(resultEncoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\nfunction sha256(data, resultEncoding) {\n    return createHash('sha256').update(data).digest(resultEncoding);\n}\n\n/** @arg {string|Buffer} data\n    @arg {string} [resultEncoding = null] - 'hex', 'binary' or 'base64'\n    @return {string|Buffer} - Buffer when resultEncoding is null, or string\n*/\nfunction sha512(data, resultEncoding) {\n    return createHash('sha512').update(data).digest(resultEncoding);\n}\n\nfunction HmacSHA256(buffer, secret) {\n    return createHmac('sha256', secret).update(buffer).digest();\n}\n\nfunction ripemd160(data) {\n    return createHash('rmd160').update(data).digest();\n}\n\n// function hash160(buffer) {\n//   return ripemd160(sha256(buffer))\n// }\n//\n// function hash256(buffer) {\n//   return sha256(sha256(buffer))\n// }\n\n//\n// function HmacSHA512(buffer, secret) {\n//   return crypto.createHmac('sha512', secret).update(buffer).digest()\n// }\n\nmodule.exports = {\n    sha1: sha1,\n    sha256: sha256,\n    sha512: sha512,\n    HmacSHA256: HmacSHA256,\n    ripemd160: ripemd160\n    // hash160: hash160,\n    // hash256: hash256,\n    // HmacSHA512: HmacSHA512\n};"]},"metadata":{},"sourceType":"script"}